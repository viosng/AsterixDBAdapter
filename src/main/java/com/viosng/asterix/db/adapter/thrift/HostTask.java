package com.viosng.asterix.db.adapter.thrift; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-29")
public class HostTask implements org.apache.thrift.TBase<HostTask, HostTask._Fields>, java.io.Serializable, Cloneable, Comparable<HostTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostTask");

  private static final org.apache.thrift.protocol.TField NOTIFY_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyAddr", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OUTPUT_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("outputAddr", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostTaskTupleSchemeFactory());
  }

  public List<HostInfo> notifyAddr; // optional
  public List<HostInfo> outputAddr; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTIFY_ADDR((short)1, "notifyAddr"),
    OUTPUT_ADDR((short)2, "outputAddr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTIFY_ADDR
          return NOTIFY_ADDR;
        case 2: // OUTPUT_ADDR
          return OUTPUT_ADDR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NOTIFY_ADDR, _Fields.OUTPUT_ADDR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTIFY_ADDR, new org.apache.thrift.meta_data.FieldMetaData("notifyAddr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostInfo.class))));
    tmpMap.put(_Fields.OUTPUT_ADDR, new org.apache.thrift.meta_data.FieldMetaData("outputAddr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostTask.class, metaDataMap);
  }

  public HostTask() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostTask(HostTask other) {
    if (other.isSetNotifyAddr()) {
      List<HostInfo> __this__notifyAddr = new ArrayList<HostInfo>(other.notifyAddr.size());
      for (HostInfo other_element : other.notifyAddr) {
        __this__notifyAddr.add(new HostInfo(other_element));
      }
      this.notifyAddr = __this__notifyAddr;
    }
    if (other.isSetOutputAddr()) {
      List<HostInfo> __this__outputAddr = new ArrayList<HostInfo>(other.outputAddr.size());
      for (HostInfo other_element : other.outputAddr) {
        __this__outputAddr.add(new HostInfo(other_element));
      }
      this.outputAddr = __this__outputAddr;
    }
  }

  public HostTask deepCopy() {
    return new HostTask(this);
  }

  @Override
  public void clear() {
    this.notifyAddr = null;
    this.outputAddr = null;
  }

  public int getNotifyAddrSize() {
    return (this.notifyAddr == null) ? 0 : this.notifyAddr.size();
  }

  public java.util.Iterator<HostInfo> getNotifyAddrIterator() {
    return (this.notifyAddr == null) ? null : this.notifyAddr.iterator();
  }

  public void addToNotifyAddr(HostInfo elem) {
    if (this.notifyAddr == null) {
      this.notifyAddr = new ArrayList<HostInfo>();
    }
    this.notifyAddr.add(elem);
  }

  public List<HostInfo> getNotifyAddr() {
    return this.notifyAddr;
  }

  public HostTask setNotifyAddr(List<HostInfo> notifyAddr) {
    this.notifyAddr = notifyAddr;
    return this;
  }

  public void unsetNotifyAddr() {
    this.notifyAddr = null;
  }

  /** Returns true if field notifyAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyAddr() {
    return this.notifyAddr != null;
  }

  public void setNotifyAddrIsSet(boolean value) {
    if (!value) {
      this.notifyAddr = null;
    }
  }

  public int getOutputAddrSize() {
    return (this.outputAddr == null) ? 0 : this.outputAddr.size();
  }

  public java.util.Iterator<HostInfo> getOutputAddrIterator() {
    return (this.outputAddr == null) ? null : this.outputAddr.iterator();
  }

  public void addToOutputAddr(HostInfo elem) {
    if (this.outputAddr == null) {
      this.outputAddr = new ArrayList<HostInfo>();
    }
    this.outputAddr.add(elem);
  }

  public List<HostInfo> getOutputAddr() {
    return this.outputAddr;
  }

  public HostTask setOutputAddr(List<HostInfo> outputAddr) {
    this.outputAddr = outputAddr;
    return this;
  }

  public void unsetOutputAddr() {
    this.outputAddr = null;
  }

  /** Returns true if field outputAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputAddr() {
    return this.outputAddr != null;
  }

  public void setOutputAddrIsSet(boolean value) {
    if (!value) {
      this.outputAddr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTIFY_ADDR:
      if (value == null) {
        unsetNotifyAddr();
      } else {
        setNotifyAddr((List<HostInfo>)value);
      }
      break;

    case OUTPUT_ADDR:
      if (value == null) {
        unsetOutputAddr();
      } else {
        setOutputAddr((List<HostInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTIFY_ADDR:
      return getNotifyAddr();

    case OUTPUT_ADDR:
      return getOutputAddr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTIFY_ADDR:
      return isSetNotifyAddr();
    case OUTPUT_ADDR:
      return isSetOutputAddr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostTask)
      return this.equals((HostTask)that);
    return false;
  }

  public boolean equals(HostTask that) {
    if (that == null)
      return false;

    boolean this_present_notifyAddr = true && this.isSetNotifyAddr();
    boolean that_present_notifyAddr = true && that.isSetNotifyAddr();
    if (this_present_notifyAddr || that_present_notifyAddr) {
      if (!(this_present_notifyAddr && that_present_notifyAddr))
        return false;
      if (!this.notifyAddr.equals(that.notifyAddr))
        return false;
    }

    boolean this_present_outputAddr = true && this.isSetOutputAddr();
    boolean that_present_outputAddr = true && that.isSetOutputAddr();
    if (this_present_outputAddr || that_present_outputAddr) {
      if (!(this_present_outputAddr && that_present_outputAddr))
        return false;
      if (!this.outputAddr.equals(that.outputAddr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_notifyAddr = true && (isSetNotifyAddr());
    list.add(present_notifyAddr);
    if (present_notifyAddr)
      list.add(notifyAddr);

    boolean present_outputAddr = true && (isSetOutputAddr());
    list.add(present_outputAddr);
    if (present_outputAddr)
      list.add(outputAddr);

    return list.hashCode();
  }

  @Override
  public int compareTo(HostTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNotifyAddr()).compareTo(other.isSetNotifyAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyAddr, other.notifyAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputAddr()).compareTo(other.isSetOutputAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputAddr, other.outputAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostTask(");
    boolean first = true;

    if (isSetNotifyAddr()) {
      sb.append("notifyAddr:");
      if (this.notifyAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.notifyAddr);
      }
      first = false;
    }
    if (isSetOutputAddr()) {
      if (!first) sb.append(", ");
      sb.append("outputAddr:");
      if (this.outputAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.outputAddr);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostTaskStandardSchemeFactory implements SchemeFactory {
    public HostTaskStandardScheme getScheme() {
      return new HostTaskStandardScheme();
    }
  }

  private static class HostTaskStandardScheme extends StandardScheme<HostTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostTask struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTIFY_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.notifyAddr = new ArrayList<HostInfo>(_list0.size);
                HostInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new HostInfo();
                  _elem1.read(iprot);
                  struct.notifyAddr.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setNotifyAddrIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTPUT_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.outputAddr = new ArrayList<HostInfo>(_list3.size);
                HostInfo _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new HostInfo();
                  _elem4.read(iprot);
                  struct.outputAddr.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setOutputAddrIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostTask struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.notifyAddr != null) {
        if (struct.isSetNotifyAddr()) {
          oprot.writeFieldBegin(NOTIFY_ADDR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.notifyAddr.size()));
            for (HostInfo _iter6 : struct.notifyAddr)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outputAddr != null) {
        if (struct.isSetOutputAddr()) {
          oprot.writeFieldBegin(OUTPUT_ADDR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outputAddr.size()));
            for (HostInfo _iter7 : struct.outputAddr)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostTaskTupleSchemeFactory implements SchemeFactory {
    public HostTaskTupleScheme getScheme() {
      return new HostTaskTupleScheme();
    }
  }

  private static class HostTaskTupleScheme extends TupleScheme<HostTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostTask struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNotifyAddr()) {
        optionals.set(0);
      }
      if (struct.isSetOutputAddr()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNotifyAddr()) {
        {
          oprot.writeI32(struct.notifyAddr.size());
          for (HostInfo _iter8 : struct.notifyAddr)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetOutputAddr()) {
        {
          oprot.writeI32(struct.outputAddr.size());
          for (HostInfo _iter9 : struct.outputAddr)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostTask struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.notifyAddr = new ArrayList<HostInfo>(_list10.size);
          HostInfo _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new HostInfo();
            _elem11.read(iprot);
            struct.notifyAddr.add(_elem11);
          }
        }
        struct.setNotifyAddrIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.outputAddr = new ArrayList<HostInfo>(_list13.size);
          HostInfo _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new HostInfo();
            _elem14.read(iprot);
            struct.outputAddr.add(_elem14);
          }
        }
        struct.setOutputAddrIsSet(true);
      }
    }
  }

}

